{"name":"Requorm.js","tagline":"JavaScript library for checking and validating HTML forms ","body":"requorm.js\r\n==========\r\n\r\nJavaScript library for checking and validating HTML forms. If any of the fields in the form incorrectly filled, submit buttons will be disabled.\r\n\r\n#### Content\r\n* [Examples](#Examples)\r\n* [Usage](#Usage)\r\n* [Addition checkers to DOM element](#Addition checkers_to_DOM_element)\r\n* [Default checkers](#Default_checkers)\r\n* [Addition own checkers](#Addition_own_checkers)\r\n* [Using CSS](#Using_CSS)\r\n\r\n#### Examples\r\nLet's watch some examples!\r\n\r\n#### Usage\r\nOkay, examples are pretty, but what about usage? First of all, include `requorm.js` (or minified `requorm.min.js`) to your HTML file:\r\n```html\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    ...\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"requorm.css\">\r\n    <script src=\"requorm.js\"></script>\r\n</head>\r\n```\r\nCreate any form with some class name:\r\n```html\r\n<form class=\"myform\">\r\n        <input type=\"text\" placeholder=\"Name\">\r\n        <input type=\"text\" placeholder=\"Email\">\r\n        <input type=\"submit\" class=\"button\" value=\"Submit\">\r\n</form>\r\n```\r\nInit library, init default checkers and(or) add own checkers and apply to our form with class name \"myform\":\r\n```html\r\n<script>\r\n    var r = new requorm()\r\n    r.initDefCheckers()\r\n    r.apply(\".myform\")\r\n</script>\r\n```\r\n\r\n#### Addition checkers to DOM element\r\nLibrary use attribure `checkers` for following tags:\r\n* `input`\r\n* `textarea`\r\n* `select`\r\n\r\nFor example:\r\n```html\r\n<input type=\"text\" checkers=\"notEmpty\">\r\n```\r\nIf the attribute is not specified, element will be ignored. One element can have multiple checkers:\r\n```html\r\n<input type=\"text\" checkers=\"notEmpty; email()\">\r\n```\r\nCheckers in attribute are separated by semicolon. If checker recieve any const arguments, you can point them like this:\r\n```html\r\n<input type=\"text\" checkers=\"minlenght(8); maxlength(32);\">\r\n<input type=\"text\" checkers=\"lenght(8, 32)\">\r\n<input type=\"text\" checkers=\"equal(abacaba)\">\r\n```\r\nNote, that list of arguments `10, 1.0f, true, abc abc` will be parsed as array of strings: `[\"10\", \"1.0f\", \"true\", \"abc abc\"]`\r\n\r\n#### Default checkers\r\n- **notEmpty** - check, that field has any input\r\n- **minLength(min)** - check, that field input has length greater or equal to `min`\r\n- **maxLength(max)** - check, that field input has length less or equal to `max`\r\n- **equal(input)** - check, that field input is equal to `input`\r\n- **alpha** - check, that field input has only alphabetic characters\r\n- **numeric** - check, that field input has only numeric characters\r\n- **email** - check, that field input has valid e-mail form\r\n\r\n#### Addition own checkers\r\nFor creating new checker, call `requorm.addChecker(name, func)`, where `name` is name of checker and `func` is function, that take DOM element and array of arguments and return `true|false`. Following code create new checker with name `equal`:\r\n```javascript\r\nvar r = new requorm()\r\nr.addChecker(\"equal\", function(element, args) {\r\n  return (args.length > 0) && (element.value == args[0])\r\n})\r\n```\r\nAfter it you can use checker in html:\r\n```html\r\n<input type=\"text\" checkers=\"equal(abacaba)\">\r\n```\r\n\r\n#### Using CSS\r\nIf you want to mark invalid and valid fields, create in your CSS file following selectors:\r\n* `.invalid-input`\r\n* `.valid-input`\r\n\r\n#### TODO\r\n* More checkers\r\n* Unit tests\r\n* Documentation\r\n* Pretty argument parser\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}